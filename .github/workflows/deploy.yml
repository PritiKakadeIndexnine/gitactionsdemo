name: Build and Push Multiple Docker Images to AWS ECR
true:
  push:
    branches:
    - git-actions-demo
  workflow_dispatch: null
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install dos2unix
      run: sudo apt-get install -y dos2unix
    - name: Convert line endings
      run: dos2unix ./build/git_update.sh
    - name: List build directory contents
      run: ls -alh build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-1
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    - id: increment-git-tag
      name: Automatic Tagging of Releases
      run: 'chmod +x ./build/git_update.sh

        ./build/git_update.sh -v major

        '
    - env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo
        IMAGE_TAG: ${{ github.sha }}
      id: build-and-push
      name: Build, Tag, and Push Images to Amazon ECR
      run: "# Find all Dockerfiles in the repository\nDOCKERFILES=$(find . -name 'Dockerfile*')\n\
        > image-uris.txt  # Clear or create a file to store image URIs\n\n# Loop through\
        \ the Dockerfiles and build/push images\nfor DOCKERFILE in $DOCKERFILES; do\n\
        \  # Extract the name part for tagging\n  BASENAME=$(basename $DOCKERFILE)\n\
        \  TAG=${BASENAME//Dockerfile_/}\n  TAG=${TAG:-default}  # Fallback to 'default'\
        \ if no specific tag\n  \n  IMAGE_URI=\"$ECR_REGISTRY/$ECR_REPOSITORY:$TAG-$IMAGE_TAG\"\
        \n  \n  echo \"Building and pushing Docker image for $DOCKERFILE to $IMAGE_URI\"\
        \n  \n  docker build -f $DOCKERFILE -t $IMAGE_URI .\n  docker push $IMAGE_URI\n\
        \  \n  echo \"IMAGE $IMAGE_URI is pushed to $ECR_REGISTRY/$ECR_REPOSITORY\"\
        \n  \n  # Save the image URI to a file\n  echo \"$TAG:$IMAGE_URI\" >> image-uris.txt\n\
        done\n"
    - name: Install AWS CLI
      run: 'sudo apt-get update

        sudo apt-get install -y awscli

        aws --version

        '
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      name: Create Log Group
      run: 'aws logs create-log-group --log-group-name /ecs/my-task || true

        '
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      name: Create ECS Cluster
      run: 'aws ecs create-cluster --cluster-name my-cluster --region us-east-1 ||
        true

        '
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      id: register-task-def
      name: Register ECS Task Definition
      run: "CLUSTER_NAME=my-cluster\nTASK_DEFINITION_NAME=my-task\n\nDOCKERFILES=$(find\
        \ . -name 'Dockerfile*')\nCONTAINERS_JSON=\"\"\nPORT=8080  # Starting port\
        \ for containerPort and hostPort\nCONTAINER_CPU=256  # CPU units for each\
        \ container\nCONTAINER_MEMORY=512  # Memory for each container\nTOTAL_CPU=0\n\
        TOTAL_MEMORY=0\n\n# Read image URIs from the file\nwhile IFS=: read -r TAG\
        \ IMAGE_URI; do\n  CONTAINER_NAME=\"${TAG}-container\"\n\n  TOTAL_CPU=$((TOTAL_CPU\
        \ + CONTAINER_CPU))\n  TOTAL_MEMORY=$((TOTAL_MEMORY + CONTAINER_MEMORY))\n\
        \n  if [ $TOTAL_CPU -le 1024 ] && [ $TOTAL_MEMORY -le 2048 ]; then\n    CONTAINERS_JSON+=\"\
        {\n      \\\"name\\\": \\\"$CONTAINER_NAME\\\",\n      \\\"image\\\": \\\"\
        $IMAGE_URI\\\",\n      \\\"essential\\\": true,\n      \\\"memory\\\": $CONTAINER_MEMORY,\n\
        \      \\\"cpu\\\": $CONTAINER_CPU,\n      \\\"portMappings\\\": [\n     \
        \   {\n          \\\"containerPort\\\": $PORT,\n          \\\"hostPort\\\"\
        : $PORT\n        }\n      ],\n      \\\"logConfiguration\\\": {\n        \\\
        \"logDriver\\\": \\\"awslogs\\\",\n        \\\"options\\\": {\n          \\\
        \"awslogs-group\\\": \\\"/ecs/$TASK_DEFINITION_NAME\\\",\n          \\\"awslogs-region\\\
        \": \\\"us-east-1\\\",\n          \\\"awslogs-stream-prefix\\\": \\\"$CONTAINER_NAME\\\
        \"\n        }\n      }\n    },\"\n\n    PORT=$((PORT + 1))  # Increment port\
        \ for next container\n  else\n    echo \"Skipping container $CONTAINER_NAME\
        \ due to resource limits.\"\n  fi\ndone < image-uris.txt\n\n# Remove the trailing\
        \ comma\nCONTAINERS_JSON=${CONTAINERS_JSON%,}\n\nTASK_DEF_JSON=\"{\n  \\\"\
        family\\\": \\\"$TASK_DEFINITION_NAME\\\",\n  \\\"networkMode\\\": \\\"awsvpc\\\
        \",\n  \\\"containerDefinitions\\\": [\n    $CONTAINERS_JSON\n  ],\n  \\\"\
        requiresCompatibilities\\\": [\\\"FARGATE\\\"],\n  \\\"cpu\\\": \\\"1024\\\
        \",\n  \\\"memory\\\": \\\"2048\\\",\n  \\\"executionRoleArn\\\": \\\"arn:aws:iam::533267409793:role/ecsTaskExecutionRole\\\
        \"\n}\"\n\necho \"$TASK_DEF_JSON\" > task-definition.json\naws ecs register-task-definition\
        \ --cli-input-json file://task-definition.json\n"
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: us-east-1
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      name: Create or Update ECS Service
      run: "CLUSTER_NAME=my-cluster\nSERVICE_NAME=my-service\nTASK_DEFINITION_NAME=my-task\n\
        \n# Check if the service already exists\nSERVICE_EXISTS=$(aws ecs describe-services\
        \ --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status'\
        \ --output text --region us-east-1 2>/dev/null || echo \"MISSING\")\n\nif\
        \ [ \"$SERVICE_EXISTS\" == \"MISSING\" ]; then\n  # Create the service if\
        \ it doesn't exist\n  aws ecs create-service \\\n    --cluster $CLUSTER_NAME\
        \ \\\n    --service-name $SERVICE_NAME \\\n    --task-definition $TASK_DEFINITION_NAME\
        \ \\\n    --desired-count 1 \\\n    --launch-type FARGATE \\\n    --network-configuration\
        \ \"awsvpcConfiguration={subnets=[subnet-0bb1c79de3EXAMPLE, subnet-0bb1c79de4EXAMPLE],securityGroups=[sg-0123456789abcdef0],assignPublicIp=ENABLED}\"\
        \ \\\n    --region us-east-1\nelse\n  # Update the service if it exists\n\
        \  aws ecs update-service \\\n    --cluster $CLUSTER_NAME \\\n    --service\
        \ $SERVICE_NAME \\\n    --task-definition $TASK_DEFINITION_NAME \\\n    --desired-count\
        \ 1 \\\n    --region us-east-1\nfi\n"
'on':
  push:
    branches:
    - git-actions-demo
